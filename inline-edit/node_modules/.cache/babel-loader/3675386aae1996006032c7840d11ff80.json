{"ast":null,"code":"var _jsxFileName = \"/Users/maciejkurek/Desktop/DEV/coyote-ui-interview/inline-edit/src/App.js\";\nimport React, { useState, useEffect } from 'react'; // import { Server } from 'miragejs';\n\nimport { getServer } from './server'; // const BASE_PATH = '/api/input';\n// let server = new Server({ timing: 2000 });\n// server.get(BASE_PATH, {});\n// server.post(BASE_PATH, (_, request) => {\n//   return JSON.parse(request.requestBody);\n// });\n\nconst App = () => {\n  const [loading, setIsLoading] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [isSuccess, setIsSuccess] = useState(null);\n  const [error, setError] = useState(null);\n\n  const fetchData = async () => {\n    await fetch(BASE_PATH).then(json => {\n      const {\n        text\n      } = JSON.parse(json._bodyInit);\n      setInputValue(text);\n    });\n  };\n\n  useEffect(() => {\n    loading && fetchData();\n  }, [loading]);\n\n  const handleChange = e => {\n    const {\n      value\n    } = e.target;\n    setInputValue(value);\n  };\n\n  const handleBlur = async e => {\n    const {\n      value\n    } = e.target;\n    const variant = Math.random();\n\n    const submitInputValue = async () => {\n      setIsLoading(true);\n      await fetch(BASE_PATH, {\n        method: 'POST',\n        body: JSON.stringify({\n          input: value\n        })\n      });\n      setIsLoading(false);\n    };\n\n    const handleSuccess = () => {\n      submitInputValue();\n      setIsSuccess(true);\n      setError(false);\n    };\n\n    const handleFailure = () => {\n      submitInputValue();\n      setIsSuccess(false);\n      setError(true);\n    };\n\n    if (variant <= 0.5) {\n      handleSuccess();\n    } else {\n      handleFailure();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: inputValue,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, loading && /*#__PURE__*/React.createElement(React.Fragment, null, \" loading... \"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, !loading && isSuccess && /*#__PURE__*/React.createElement(React.Fragment, null, \"\\u2705\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, !loading && error && /*#__PURE__*/React.createElement(React.Fragment, null, \"\\u26A0\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/maciejkurek/Desktop/DEV/coyote-ui-interview/inline-edit/src/App.js"],"names":["React","useState","useEffect","getServer","App","loading","setIsLoading","inputValue","setInputValue","isSuccess","setIsSuccess","error","setError","fetchData","fetch","BASE_PATH","then","json","text","JSON","parse","_bodyInit","handleChange","e","value","target","handleBlur","variant","Math","random","submitInputValue","method","body","stringify","input","handleSuccess","handleFailure","display"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,SAAT,QAA0B,UAA1B,C,CAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,OAAD,EAAUC,YAAV,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMY,SAAS,GAAG,YAAY;AAC5B,UAAMC,KAAK,CAACC,SAAD,CAAL,CAAiBC,IAAjB,CAAuBC,IAAD,IAAU;AACpC,YAAM;AAAEC,QAAAA;AAAF,UAAWC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,SAAhB,CAAjB;AACAb,MAAAA,aAAa,CAACU,IAAD,CAAb;AACD,KAHK,CAAN;AAID,GALD;;AAOAhB,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,OAAO,IAAIQ,SAAS,EAApB;AACD,GAFQ,EAEN,CAACR,OAAD,CAFM,CAAT;;AAIA,QAAMiB,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,CAAC,CAACE,MAApB;AACAjB,IAAAA,aAAa,CAACgB,KAAD,CAAb;AACD,GAHD;;AAKA,QAAME,UAAU,GAAG,MAAOH,CAAP,IAAa;AAC9B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,CAAC,CAACE,MAApB;AAEA,UAAME,OAAO,GAAGC,IAAI,CAACC,MAAL,EAAhB;;AAEA,UAAMC,gBAAgB,GAAG,YAAY;AACnCxB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAMQ,KAAK,CAACC,SAAD,EAAY;AACrBgB,QAAAA,MAAM,EAAE,MADa;AAErBC,QAAAA,IAAI,EAAEb,IAAI,CAACc,SAAL,CAAe;AAAEC,UAAAA,KAAK,EAAEV;AAAT,SAAf;AAFe,OAAZ,CAAX;AAKAlB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KARD;;AAUA,UAAM6B,aAAa,GAAG,MAAM;AAC1BL,MAAAA,gBAAgB;AAEhBpB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KALD;;AAOA,UAAMwB,aAAa,GAAG,MAAM;AAC1BN,MAAAA,gBAAgB;AAEhBpB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KALD;;AAOA,QAAIe,OAAO,IAAI,GAAf,EAAoB;AAClBQ,MAAAA,aAAa;AACd,KAFD,MAEO;AACLC,MAAAA,aAAa;AACd;AACF,GAlCD;;AAoCA,sBACE,uDACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,KAAK,EAAE9B,UAAd;AAA0B,IAAA,QAAQ,EAAEe,YAApC;AAAkD,IAAA,MAAM,EAAEI,UAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMrB,OAAO,iBAAI,yDAAjB,CAFF,CADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,CAACA,OAAD,IAAYI,SAAZ,iBAAyB,mDAA/B,CALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,CAACJ,OAAD,IAAYM,KAAZ,iBAAqB,mDAA3B,CANF,CADF;AAUD,CApED;;AAsEA,eAAeP,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n// import { Server } from 'miragejs';\nimport { getServer } from './server';\n\n// const BASE_PATH = '/api/input';\n\n// let server = new Server({ timing: 2000 });\n// server.get(BASE_PATH, {});\n// server.post(BASE_PATH, (_, request) => {\n//   return JSON.parse(request.requestBody);\n// });\n\nconst App = () => {\n  const [loading, setIsLoading] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [isSuccess, setIsSuccess] = useState(null);\n  const [error, setError] = useState(null);\n\n  const fetchData = async () => {\n    await fetch(BASE_PATH).then((json) => {\n      const { text } = JSON.parse(json._bodyInit);\n      setInputValue(text);\n    });\n  };\n\n  useEffect(() => {\n    loading && fetchData();\n  }, [loading]);\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    setInputValue(value);\n  };\n\n  const handleBlur = async (e) => {\n    const { value } = e.target;\n\n    const variant = Math.random();\n\n    const submitInputValue = async () => {\n      setIsLoading(true);\n      await fetch(BASE_PATH, {\n        method: 'POST',\n        body: JSON.stringify({ input: value }),\n      });\n\n      setIsLoading(false);\n    };\n\n    const handleSuccess = () => {\n      submitInputValue();\n\n      setIsSuccess(true);\n      setError(false);\n    };\n\n    const handleFailure = () => {\n      submitInputValue();\n\n      setIsSuccess(false);\n      setError(true);\n    };\n\n    if (variant <= 0.5) {\n      handleSuccess();\n    } else {\n      handleFailure();\n    }\n  };\n\n  return (\n    <>\n      <div style={{ display: 'flex' }}>\n        <input value={inputValue} onChange={handleChange} onBlur={handleBlur} />\n        <div>{loading && <> loading... </>}</div>\n      </div>\n      <div>{!loading && isSuccess && <>&#9989;</>}</div>\n      <div>{!loading && error && <>&#x26A0;</>}</div>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}